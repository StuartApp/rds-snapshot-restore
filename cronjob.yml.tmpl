---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: rds-snapshot-restore-cron
  namespace: kube-system
  labels:
    name: rds-snapshot-restore-cron
spec:
  schedule: "0 0 * * *"
  successfulJobsHistoryLimit: 2
  failedJobsHistoryLimit: 2  
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      backoffLimit: 2
      template:
        spec:
          imagePullSecrets:
          - name: aws-registry
          terminationGracePeriodSeconds: 0
          restartPolicy: OnFailure
          containers: 
          - name: snapshot-restore
            imagePullPolicy: IfNotPresent
            image: wylie/rds-snapshot-restore
            args:
              - python3 
              - /ssr/snapshot_restore.py
              - --prefix
              - PREFIX OF NEW RDS INSTANCE
              - --target 
              - SOME DB INSTANCE IDENTIFIER TO RESTORE LATEST SNAPSHOT FROM
              - --subnet-name
              - SOME DB SUBNET GROUP NAME TO CREATE INSTANCE IN
              - --sec-group-names
              - SECURITY GROUP NAMES (can specify this arg multiple times)
              - --cname-name
              - NAME OF CNAME TO CREATE (i.e. staging-rds - the script will append the --dns-suffix)
              - --match-zone
              - SUBSTRING OF ROUTE 53 ZONE TO MATCH
              - --dns-suffix
              - example.com
              - --vpc-tag-name
              - A TAG TO FILTER THE DESTINATION VPC ON
            env:
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: rds-snapshot-restore
                  key: aws_access_key_id
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: rds-snapshot-restore
                  key: aws_secret_access_key
            resources:
              limits:
                cpu: 200m
                memory: 150Mi
              requests:
                cpu: 50m
                memory: 75Mi
